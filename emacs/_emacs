;;; .emacs --- Summary

;; -*- coding: utf-8; lexical-binding: t -*

;;; Commentary:

;; Emacs configuration of apt-ghetto

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)
;;; Code:

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(custom-enabled-themes '(manoj-dark))
 '(doc-view-continuous nil)
 '(erc-nick "apt-ghetto")
 '(erc-server "irc.libera.chat")
 '(global-linum-mode t)
 '(package-selected-packages
   '(lsp-ui lsp-mode company-ctags edit-server auctex company-auctex impatient-mode counsel-etags markdown-mode flycheck magit modern-cpp-font-lock elpy use-package))
 '(safe-local-variable-values '((TeX-close-quote . "\"'") (TeX-open-quote . "\"`"))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; Increment Garbage collection during initialisation
(setq gc-cons-threshold 64000000)
(add-hook 'after-init-hook #'(lambda ()
                               ;; restore after startup
                               (setq gc-cons-threshold 800000)))

;; MELPA
(require 'package)
(setq package-archives
      '(("gnu"             . "https://elpa.gnu.org/packages/")
        ("melpa-stable"    . "https://stable.melpa.org/packages/")
        ("melpa"           . "https://melpa.org/packages/"))
      package-archive-priorities
      '(("gnu"             . 10)
        ("melpa-stable"    . 5)
        ("melpa"           . 0)))


;; Setze die Schriftart
(add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-12"))
(set-face-attribute 'default t :font "DejaVu Sans Mono-12")


;; Für Perl anstelle von PDE (Perl Development Environment), falls Perl Mode nicht richtig funktioniert/zum Testen
(mapc
 (lambda (pair)
   (if (eq (cdr pair) 'perl-mode)
       (setcdr pair 'cperl-mode)))
 (append auto-mode-alist interpreter-mode-alist))

;; Use-package
(eval-when-compile
  (require 'use-package))

;; Ivy
(use-package ivy
  :config
  (ivy-mode 1))

;; Elpy
(use-package elpy
  :ensure t
  :init
  (elpy-enable)
  :config
  (setq elpy-rpc-python-command "python3"))

;; Markdown
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

;; Für Markdown: M-x package-install RET impatient-mode RET
;; Starte webserver: M-x httpd-start
;; In Buffer mit Markdown: M-x impatient-mode
;; In Browser: localhost:8080/imp
;; In Buffer: M-x imp-set-user-filter RET markdown-html RET
(defun markdown-html (buffer)
  "Convert markdown to html.
Use BUFFER"
  (princ (with-current-buffer buffer
	   (format "<!DOCTYPE html><html><title>Impatient Markdown</title><xmp theme=\"united\" style=\"display:none;\"> %s  </xmp><script src=\"http://ndossougbe.github.io/strapdown/dist/strapdown.js\"></script></html>"
                   (buffer-substring-no-properties (point-min) (point-max))))
         (current-buffer)))

;;
;; C++
;;

;; lsp (language server protocol mode)
;; A code completion, syntax checker, etc. engine that uses the LSP to talk to completion servers.
(use-package lsp-mode
  :ensure t
  :hook (;; Python on Linux is pyls (python language server)
	 (python-mode . lsp)
	 ;; Bash uses bash-language-server
	 (shell-mode . lsp)
	 )
  :init
  ;; Disable yasnippet. We re-enable when yasnippet is loaded
  (defvar lsp-enable-snippet nil)
  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :hook (lsp-mode . lsp-ui-mode)
    :config
    ;; Use find references and definitions key bindings instead of CTags.
    (defun set-local-keybinds-lsp-ui ()
      "Sets keybindings for lsp mode"
      (interactive)
      (local-set-key (kbd "M-.") 'lsp-ui-peek-find-definitions)
      (local-set-key (kbd "M-?") 'lsp-ui-peek-find-references)
      )
    (add-hook 'c-mode-common-hook 'set-local-keybinds-lsp-ui)
    (add-hook 'python-mode-hook 'set-local-keybinds-lsp-ui)
    (add-hook 'shell-mode-hook ' 'set-local-keybinds-lsp-ui)
    )

  (add-hook 'c-mode-common-hook #'lsp)
  (add-hook 'lsp-mode-hook
	    #'(lambda ()
	       (local-set-key (kbd "M-.") 'lsp-find-definition)))

  :config
  ;; Set GC threshold to 25MB since LSP is very memory hungry and produces a lot of garbage
  (setq gc-cons-threshold 25000000)

  ;; Increase the amount of data which Emacs reads from the process. The emacs
  ;; default is too low 4k considering that some of the language server
  ;; responses are in 800k - 3M ragne. Set to 1MB
  (setq read-process-output-max (* 1024 1024))

  ;; Extra flags passed to clangd.
  (defvar lsp-clients-clangd-args '("--clang-tidy"
				    "--fallback-style=google"
				    "-j=4"
				    "--enable-config"
				    "--suggest-missing-includes"
				    "--pch-storage=memory"))
  (setq lsp-enable-on-type-formatting nil)
  ;; (setq lsp-before-save-edits nil)
  ;; Use flycheck instead of flymake
  (setq lsp-prefer-flymake nil))

;; Snippets
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :init
  (eval-when-compile
    ;; Silence missing function warnings
    (declare-function yas-global-mode "yasnippet.el"))
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode)
  ;; Add snippet support to lsp mode
  (setq lsp-enable-snippet t)
  )
(use-package yasnippet-snippets
  :ensure t
  :after yasnippet
  :config
  (yas-reload-all))
;; Apparently the company-yasnippet backend shadows all backends that
;; come after it. To work around this we assign yasnippet to a different
;; keybind since actual source completion is vital.
;;
;; The above seems to not be an issue with LSP, but it is still nice to be
;; able to only call up the snippets.
(use-package company-yasnippet
  :bind ("C-M-y" . company-yasnippet)
  :after (yasnippet company)
  )

;; Autocomplete
(use-package company
  :ensure t
  :diminish company-mode
  :hook (prog-mode . global-company-mode)
  :commands (company-mode company-indent-or-complete-common)
  :init
  (setq company-minimum-prefix-length 2
	company-tooltip-limit 14
	company-tooltip-align-annotations t
	company-require-match 'never
	company-global-modes '(not erc-mode message-mode help-mode)

	;; These auto-complete the current selection when
	;; `company-auto-complete-chars' is typed. This is too magical. We
	;; already have the much more explicit RET and TAB.
	company-auto-complete  nil
	company-auto-complete-chars nil

	;; Only search the current buffer for `company-dabbrev' (a backend that
	;; suggests text your open buffers). This prevents Company from causing
	;; lag once you have a lot of buffers open.
	company-dabbrev-other-buffers nil

	;; Make `company-dabbrev' fully case-sensitive, to improve UX with
	;; domain-specific words with particular casing.
	company-dabbrev-ignore-case nil
	company-dabbrev-downcase nil)
  :config
  (setq company-idle-delay 0)
  ;; remove backends for packages that are dead
  (setq company-backends (delete 'company-eclim company-backends))
  (setq company-backends (delete 'company-clang company-backends))
  (setq company-backends (delete 'company-xcode company-backends))
  )

(use-package modern-cpp-font-lock
  :ensure t
  :diminish modern-c++-font-lock-mode
  :hook (c++-mode . modern-c++-font-lock-mode)
  :init
  (eval-when-compile
    ;; Silence missing function warnings
    (declare-function modern-c++-font-lock-global-mode
		      "modern-cpp-font-lock.el"))
  :config
  (modner-c++font-lock-global-mode t)
  )
;;(require 'clang-format)
(global-set-key (kbd "C-c C-f") 'clang-format-region)
;; counsel-etags
(use-package counsel-etags
  :ensure t)

;; On-the-fly syntax checking
(use-package flycheck
  :ensure t
  :diminish flycheck-mode
  :hook (prog-mode . flycheck-mode)
  :init
  (eval-when-compile
    ;; Silence missing function warnings
    (declare-function global-flycheck-mode "flycheck.el"))
  :config
  ;; Turn flycheck on everywhere
  (global-flycheck-mode t)
  (setq flycheck-check-syntax-automatically '(save mode-enabled)))

;; Load asm-mode when opening assembly files
(use-package asm-mode
  :mode ("\\.s\\'"))



;; Show argument list in echo area
(use-package eldoc
  :diminish eldoc-mode)
;;  :init (add-hook 'ycmd-mode-hook 'ycmd-eldoc-setup))

;; Company mode auto-completion for AUCTeX
(use-package company-auctex
  :after (auctex company)
  :config (company-auctex-init))

;; Edit with Emacs Firefox addon
(use-package edit-server
  :ensure t
  :commands edit-server-start
  :init (if after-init-time
            (edit-server-start)
          (add-hook 'after-init-hook
                    #'(lambda() (edit-server-start))))
  :config (setq edit-server-new-frame-alist
                '((name . "Edit with Emacs FRAME")
                  (top . 200)
                  (left . 200)
                  (width . 80)
                  (height . 25)
                  (minibuffer . t)
                  (menu-bar-lines . t)
                  (window-system . x))))

;; Kalender auf deutsch umstellen
(setq calendar-week-start-day 1
      calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch" "Donnerstag" "Freitag" "Samstag"]
      calendar-month-name-array ["Januar" "Februar" "März"
                                 "April" "Mai" "Juni"
                                 "Juli" "August" "September"
                                 "Oktober" "November" "Dezember"])

;;; .emacs ends here
